{
  "extends": [
    "airbnb",
    "airbnb-typescript",
    "next/core-web-vitals",
    "prettier"
  ],
  "parserOptions": {
    "project": "./tsconfig.json"
  },
  "rules": {
    "@typescript-eslint/no-floating-promises": "warn",
    "@typescript-eslint/no-misused-promises": [
      "error",
      { "checksVoidReturn": { "attributes": false } }
    ],
    "@typescript-eslint/naming-convention": [
      "warn",
      {
        "selector": "default",
        "format": ["camelCase"],
        "leadingUnderscore": "allow",
        "trailingUnderscore": "allow"
      },
      {
        "selector": "variable",
        "format": ["camelCase", "UPPER_CASE"],
        "leadingUnderscore": "allow",
        "trailingUnderscore": "allow"
      },
      {
        "selector": "typeLike",
        "format": ["PascalCase"]
      },
      // for React Component
      {
        "selector": "function",
        "format": ["camelCase", "PascalCase"]
      }
    ],

    // 型で分岐を網羅できてるときでもエラーになるのでoffにする。TypeScriptのチェックに任せる。
    "consistent-return": "off",
    // case句だけで型の全ての分岐を網羅しててもエラーになるのでoff。
    "default-case": "off",
    // exportするものを上側に、そこから参照されるexportしないものを下側に書きたい
    "@typescript-eslint/no-use-before-define": "off",
    // airbnbの設定から for-of 禁止のみ無効化
    // Regeneratorのパフォーマンスや無理やりな関数型プログラミングより、分かりやすさを優先
    "no-restricted-syntax": [
      "error",
      {
        "selector": "ForInStatement",
        "message": "for..in loops iterate over the entire prototype chain, which is virtually never what you want. Use Object.{keys,values,entries}, and iterate over the resulting array."
      },
      // {
      //   "selector": "ForOfStatement",
      //   "message": "iterators/generators require regenerator-runtime, which is too heavyweight for this guide to allow them. Separately, loops should be avoided in favor of array iterations."
      // },
      {
        "selector": "LabeledStatement",
        "message": "Labels are a form of GOTO; using them makes code confusing and hard to maintain and understand."
      },
      {
        "selector": "WithStatement",
        "message": "`with` is disallowed in strict mode because it makes code impossible to predict and optimize."
      }
    ],
    // 手続き的にfor-ofを使うプログラミングだと、ifネストが避けられて見やすくなる (早期returnと同様)
    "no-continue": "off"
  }
}
