// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Track {
  id        String  @id
  title     String  @unique
  artist    String
  skillType Int
  long      Boolean
  openType  Int
  scores    Score[]

  // ソート用の曲名
  // 主に日本語の、漢字の読み方や記号の除去用
  sortTitle String?

  // 論理削除
  deleted Boolean

  userTrack             UserTrack?
  loadOhpHistoryResults LoadOhpHistoryResult[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Score {
  trackId    String
  difficulty Int
  lv         Float

  track                 Track                  @relation(fields: [trackId], references: [id])
  userScore             UserScore?
  loadOhpHistoryResults LoadOhpHistoryResult[]

  @@unique([trackId, difficulty])
}

model UserTrack {
  id     String      @id
  like   Int?
  isOpen Boolean
  memo   String
  scores UserScore[]

  track Track @relation(fields: [id], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserScore {
  trackId    String
  difficulty Int

  achievement Float
  failed      Boolean
  skillPoint  Float

  wishPractice    Boolean
  wishAchievement Boolean
  wishEvent       Boolean
  wishNextPick    Boolean
  wishPlayed      Boolean

  movieURL String

  userTrack UserTrack @relation(fields: [trackId], references: [id])
  score     Score     @relation(fields: [trackId, difficulty], references: [trackId, difficulty])

  @@unique([trackId, difficulty])
}

model LoadOhpHistoryResult {
  index Int @id

  // 成功時用
  trackId           String?
  difficulty        Int?
  submitAchievement Float? // 登録しようとした達成率
  oldAchievement    Float? // 元々登録されていた達成率
  newAchievement    Float? // 登録後の達成率

  // 失敗時用
  error String?

  track Track? @relation(fields: [trackId], references: [id])
  score Score? @relation(fields: [trackId, difficulty], references: [trackId, difficulty])
}

model WikiLoadingIssue {
  // issue id
  // type="error"以外は、trackIdに合わせる
  // type="error"ならランダム生成
  id String @id

  type String

  // type="delete" 以外用
  source String?
  rowNo  Int?

  // type="new", "diff" 用
  track WikiLoadingNewTrack?

  // type="diff" 用
  diffirences WikiLoadingDiffirence[]

  // type="error" 用
  errorMessage String?
}

// wikiから読み込みで追加/上書きしようとしている曲データ
model WikiLoadingNewTrack {
  id        String                @id
  title     String
  artist    String
  skillType Int
  long      Boolean
  openType  Int
  scores    WikiLoadingNewScore[]

  issue WikiLoadingIssue @relation(fields: [id], references: [id])
}

model WikiLoadingNewScore {
  trackId    String
  difficulty Int
  lv         Float

  track WikiLoadingNewTrack @relation(fields: [trackId], references: [id])

  @@unique([trackId, difficulty])
}

// WikiLoadingIssue の type="diff" の場合の、値の相違点1つずつ
model WikiLoadingDiffirence {
  id           String  @id
  issueId      String
  propertyName String
  difficulty   Int?
  oldValue     String?
  newValue     String?

  issue WikiLoadingIssue @relation(fields: [issueId], references: [id])
}
